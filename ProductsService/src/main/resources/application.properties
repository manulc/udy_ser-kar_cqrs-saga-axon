# Obtiene un puerto aleatorio disponible
server.port=0

spring.application.name=products-service

# Opcional porque, en este caso, nuestro servidor Eureka se ejecuta en el host y puerto por defecto
eureka.client.service-url.defaultZone=http://localhost:8761/eureka
# Como ahora estamos usando el puerto 0 para generar puertos aleatorios disponibles para cada instancia de este microservicio,
# tenemos que usar esta propiedad para establecer un id único de registro en el servidor Eureka para cada instancia que se cree
# Si no hacemos esto, en Eureka únicamente se registrará la última instancia creada porque sobrescribe a las anteriores debido a que todas comparten el mismo nombre(product-service) y el mismo puerto(0)
# La segunda parte de este id único consite en utilizar el valor de la variable "instanceId" si existe o generar un valor númerico aleatorio de forma automática si no existe esa variable
eureka.instance.instance-id=${spring.application.name}:${instanceId:${random.value}}
#eureka.instance.hostname=localhost
eureka.instance.prefer-ip-address=true

# Por defecto, la base de datos H2 es una base de datos en memoria, pero con esta configuración, vamos a persistir los datos en el archivo "products"
# La configuración "AUTO_SERVER=true" es para permitir que multiples procesos puedan acceder a la misma base de datos
spring.datasource.url=jdbc:h2:file:../products;AUTO_SERVER=true
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.h2.console.enabled=true
# Para poder acceder a la consola H2 a través del Api Gateway
spring.h2.console.settings.web-allow-others=true

# Por defecto, no se incluye el atributo "message" en las respuestas de error debido a temas de seguridad
# Con este valor sobre esta propiedad hacemos que se incluya siempre dicho atributo en las respuestas de error
server.error.include-message=always
# Para obtener detalles sobre qué propiedades han dado fallos de validación
server.error.include-binding-errors=always

# Establece el procesador de eventos Subscribing(Por defecto se usa el procesador de eventos Tracking) para aquellos manejadores de eventos pertenecientes al grupo de procesamiento "product-group".
# Ésto lo hacemos para que el manejador de eventos, que se encarga de actualizar la pequeña tabla de consultas para validaciones(tabla Look-up), y el Aggregate se ejecuten en el mismo hilo y así poder
# mantener la consistencia de datos entre esta tabla y el Event Store. De esta forma, si ocurre alguna excepción a la hora de persistir datos en alguna de estas tablas y no se captura ni se maneja,
# la excepción llegará hasta el Aggregate y se ejecutará un rollback de la transacción iniciada(En este caso, la transacción abarca a ámbas tablas debido a que sus procesos de persistencia se ejecutan en el mismo hilo).
axon.eventhandling.processors.product-group.mode=subscribing
# Forma para indicar el nombre de un paquete como grupo de procesamiento
# axon.eventhandling.processors[com.mlorenzo.estore.productsservice.commandapi].mode=subscribing

# En nuestro caso, usamos el nivel de logging Debug en el paquete org.axonframework.axonserver.connector.event.axon.AxonServerEventStores para visualizar por consola los snapshots del Aggregate que se crean
logging.level.org.axonframework.axonserver.connector.event.axon.AxonServerEventStore=DEBUG